{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import {\n  PlaneGeometry,\n  ShaderMaterial,\n  Mesh,\n  Scene,\n  OrthographicCamera,\n  DoubleSide,\n  Vector3,\n} from 'three';\nimport DoubleBuffer from 'double-buffer';\n\nexport default class BlurCanvas {\n  constructor(opts = {}) {\n    const { width, height } = opts;\n\n    this.renderer = opts.renderer;\n    this.iterations = opts.iterations || 8;\n    this.fbo = new DoubleBuffer({ width, height });\n\n    this.scene = new Scene();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0.1, 2);\n    this.camera.position.set(0, 0, 1);\n    this.camera.lookAt(new Vector3());\n\n    this.setupPlane();\n  }\n\n  blur(texture) {\n    this.plane.material.uniforms.u_blur_amount.value = 0;\n    this.plane.material.uniforms.u_source_texture.value = texture;\n    this.plane.material.uniforms.u_image_dimensions.value = [\n      texture.image.width,\n      texture.image.height,\n    ];\n    this.plane.material.needsUpdate = true;\n\n    this.render();\n    this.plane.material.uniforms.u_blur_amount.value = 1;\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const radius = (this.iterations - i - 1);\n      const even = i % 2 === 0;\n\n      // even horizontal, odd vertical\n      this.plane.material.uniforms.u_blur_direction.value = even ? [radius, 0] : [0, radius];\n      this.render();\n    }\n  }\n\n  setupPlane(width, height) {\n    this.plane = new Mesh(\n      new PlaneGeometry(width, height),\n      this.createMaterial(),\n    );\n\n\n    this.scene.add(this.plane);\n  }\n\n  getCurrentTexture() {\n    return this.fbo.read().texture\n  }\n\n  render() {\n    // set render target to fbo write target and render\n    this.renderer.setRenderTarget(this.fbo.write());\n    this.renderer.render(this.scene, this.camera);\n\n    // swap read/write buffers\n    this.fbo.swap();\n\n    // set sim material texture to freshly drawn target\n    this.plane.material.uniforms.u_buffer_texture.value = this.fbo.read().texture;\n  }\n\n  createMaterial() {\n    return new ShaderMaterial({\n      transparent: true,\n      side: DoubleSide,\n      uniforms: {\n        u_buffer_texture: { value: this.fbo.read().texture, type: 't' },\n        u_source_texture: { value: null, type: 't' },\n        u_blur_amount: { value: 0 },\n        u_blur_direction: { value: [0, 0] },\n        u_image_dimensions: { value: [0, 0] },\n      },\n      vertexShader: `\n        varying vec2 vUv;\n\n        void main() {\n          vUv = uv;\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        varying vec2 vUv;\n        uniform sampler2D u_source_texture;\n        uniform sampler2D u_buffer_texture;\n        uniform float u_blur_amount;\n        uniform vec2 u_blur_direction;\n        uniform vec2 u_image_dimensions;\n\n        // from glsl-fast-gaussian-blur by jam3\n        vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n          vec4 color = vec4(0.0);\n          vec2 off1 = vec2(1.411764705882353) * direction;\n          vec2 off2 = vec2(3.2941176470588234) * direction;\n          vec2 off3 = vec2(5.176470588235294) * direction;\n\n          color += texture2D(image, uv) * 0.1964825501511404;\n\n          color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n          color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n\n          color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n          color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n\n          color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n          color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n          return color;\n        }\n\n        void main() {\n          vec4 source_color = texture2D(u_source_texture, vUv);\n          vec4 map = blur13(\n            u_buffer_texture,\n            vUv,\n            u_image_dimensions,\n            u_blur_direction\n          );\n\n          vec4 color = mix(source_color, map, u_blur_amount);\n\n          gl_FragColor = color;\n        }\n      `,\n    })\n  }\n}\n"],"names":["BlurCanvas","constructor","opts","width","height","this","renderer","iterations","fbo","DoubleBuffer","scene","Scene","camera","OrthographicCamera","position","set","lookAt","Vector3","setupPlane","blur","texture","plane","material","uniforms","u_blur_amount","value","u_source_texture","u_image_dimensions","image","needsUpdate","render","i","radius","u_blur_direction","Mesh","PlaneGeometry","createMaterial","add","getCurrentTexture","read","setRenderTarget","write","swap","u_buffer_texture","ShaderMaterial","transparent","side","DoubleSide","type","vertexShader","fragmentShader"],"mappings":"uKAWqBA,EACnBC,YAAYC,EAAO,IACjB,MAAMC,MAAEA,EAAFC,OAASA,GAAWF,EAE1BG,KAAKC,SAAWJ,EAAKI,SACrBD,KAAKE,WAAaL,EAAKK,YAAc,EACrCF,KAAKG,IAAM,IAAIC,EAAa,CAAEN,MAAAA,EAAOC,OAAAA,IAErCC,KAAKK,MAAQ,IAAIC,EACjBN,KAAKO,OAAS,IAAIC,GAAoB,GAAK,GAAK,IAAM,GAAK,GAAK,GAChER,KAAKO,OAAOE,SAASC,IAAI,EAAG,EAAG,GAC/BV,KAAKO,OAAOI,OAAO,IAAIC,GAEvBZ,KAAKa,aAGPC,KAAKC,GACHf,KAAKgB,MAAMC,SAASC,SAASC,cAAcC,MAAQ,EACnDpB,KAAKgB,MAAMC,SAASC,SAASG,iBAAiBD,MAAQL,EACtDf,KAAKgB,MAAMC,SAASC,SAASI,mBAAmBF,MAAQ,CACtDL,EAAQQ,MAAMzB,MACdiB,EAAQQ,MAAMxB,QAEhBC,KAAKgB,MAAMC,SAASO,aAAc,EAElCxB,KAAKyB,SACLzB,KAAKgB,MAAMC,SAASC,SAASC,cAAcC,MAAQ,EAEnD,IAAK,IAAIM,EAAI,EAAGA,EAAI1B,KAAKE,WAAYwB,GAAK,EAAG,CAC3C,MAAMC,EAAU3B,KAAKE,WAAawB,EAAI,EAItC1B,KAAKgB,MAAMC,SAASC,SAASU,iBAAiBR,MAHjCM,EAAI,GAAM,EAGsC,CAACC,EAAQ,GAAK,CAAC,EAAGA,GAC/E3B,KAAKyB,UAITZ,WAAWf,EAAOC,GAChBC,KAAKgB,MAAQ,IAAIa,EACf,IAAIC,EAAchC,EAAOC,GACzBC,KAAK+B,kBAIP/B,KAAKK,MAAM2B,IAAIhC,KAAKgB,OAGtBiB,oBACE,YAAY9B,IAAI+B,OAAOnB,QAGzBU,SAEEzB,KAAKC,SAASkC,gBAAgBnC,KAAKG,IAAIiC,SACvCpC,KAAKC,SAASwB,OAAOzB,KAAKK,MAAOL,KAAKO,QAGtCP,KAAKG,IAAIkC,OAGTrC,KAAKgB,MAAMC,SAASC,SAASoB,iBAAiBlB,MAAQpB,KAAKG,IAAI+B,OAAOnB,QAGxEgB,iBACE,WAAWQ,EAAe,CACxBC,aAAa,EACbC,KAAMC,EACNxB,SAAU,CACRoB,iBAAkB,CAAElB,MAAOpB,KAAKG,IAAI+B,OAAOnB,QAAS4B,KAAM,KAC1DtB,iBAAkB,CAAED,MAAO,KAAMuB,KAAM,KACvCxB,cAAe,CAAEC,MAAO,GACxBQ,iBAAkB,CAAER,MAAO,CAAC,EAAG,IAC/BE,mBAAoB,CAAEF,MAAO,CAAC,EAAG,KAEnCwB,aAAe,oLASfC,eAAiB"}